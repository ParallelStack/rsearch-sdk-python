# coding: utf-8

"""
    ParallelStack RSearch API

    REST API Specification for ParallelStack RSearch API.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: team@parallelstack.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rsearch_client.api_client import ApiClient


class RsearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_document(self, index_name, doc_type_name, doc_id, **kwargs):  # noqa: E501
        """add_document  # noqa: E501

        Creates `doc_id` in `doc_type_name` for `index_name`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_document(index_name, doc_type_name, doc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: CreateDocumentSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)  # noqa: E501
            return data

    def add_document_with_http_info(self, index_name, doc_type_name, doc_id, **kwargs):  # noqa: E501
        """add_document  # noqa: E501

        Creates `doc_id` in `doc_type_name` for `index_name`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_document_with_http_info(index_name, doc_type_name, doc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: CreateDocumentSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name''doc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `add_document`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `add_document`")  # noqa: E501
        # verify the required parameter 'doc_id' is set
        if ('doc_id' not in params or
                params['doc_id'] is None):
            raise ValueError("Missing the required parameter `doc_id` when calling `add_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501
        if 'doc_id' in params:
            path_params['doc_id'] = params['doc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''writeAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDocumentSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_document_type(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """add_document_type  # noqa: E501

        Creates specific `document_type` in `index_name` with specified parameters. You should define the parameters correctly as per the getting started guide, else getting the right structure might be an issue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_document_type(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: CreateDocTypeSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_document_type_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_document_type_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
            return data

    def add_document_type_with_http_info(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """add_document_type  # noqa: E501

        Creates specific `document_type` in `index_name` with specified parameters. You should define the parameters correctly as per the getting started guide, else getting the right structure might be an issue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_document_type_with_http_info(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: CreateDocTypeSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_document_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `add_document_type`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `add_document_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDocTypeSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_index(self, index_name, **kwargs):  # noqa: E501
        """add_index  # noqa: E501

        Creates `a new index`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_index(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: CreateIndexSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_index_with_http_info(index_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_index_with_http_info(index_name, **kwargs)  # noqa: E501
            return data

    def add_index_with_http_info(self, index_name, **kwargs):  # noqa: E501
        """add_index  # noqa: E501

        Creates `a new index`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_index_with_http_info(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: CreateIndexSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `add_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''writeAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateIndexSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_document(self, index_name, doc_type_name, doc_id, **kwargs):  # noqa: E501
        """delete_document  # noqa: E501

        Deletes `doc_id` in `doc_type_name` for `index_name`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_document(index_name, doc_type_name, doc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: DeleteDocumentSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)  # noqa: E501
            return data

    def delete_document_with_http_info(self, index_name, doc_type_name, doc_id, **kwargs):  # noqa: E501
        """delete_document  # noqa: E501

        Deletes `doc_id` in `doc_type_name` for `index_name`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_document_with_http_info(index_name, doc_type_name, doc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: DeleteDocumentSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name''doc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `delete_document`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `delete_document`")  # noqa: E501
        # verify the required parameter 'doc_id' is set
        if ('doc_id' not in params or
                params['doc_id'] is None):
            raise ValueError("Missing the required parameter `doc_id` when calling `delete_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501
        if 'doc_id' in params:
            path_params['doc_id'] = params['doc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''writeAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteDocumentSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_index(self, index_name, **kwargs):  # noqa: E501
        """delete_index  # noqa: E501

        Deletes `an index` {index_name}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_index(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: DeleteIndexSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_index_with_http_info(index_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_index_with_http_info(index_name, **kwargs)  # noqa: E501
            return data

    def delete_index_with_http_info(self, index_name, **kwargs):  # noqa: E501
        """delete_index  # noqa: E501

        Deletes `an index` {index_name}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_index_with_http_info(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: DeleteIndexSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `delete_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''writeAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteIndexSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_advanced_doc_type_suggest_results(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """get_advanced_doc_type_suggest_results  # noqa: E501

        Gets Suggestions from `doc_type_name` in `index_name` limited by the body params. Please ensure you refer the getting started guides, to get the format of the query right.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_advanced_doc_type_suggest_results(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document_type (required)
        :return: SuggestSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_advanced_doc_type_suggest_results_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_advanced_doc_type_suggest_results_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
            return data

    def get_advanced_doc_type_suggest_results_with_http_info(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """get_advanced_doc_type_suggest_results  # noqa: E501

        Gets Suggestions from `doc_type_name` in `index_name` limited by the body params. Please ensure you refer the getting started guides, to get the format of the query right.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_advanced_doc_type_suggest_results_with_http_info(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document_type (required)
        :return: SuggestSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advanced_doc_type_suggest_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_advanced_doc_type_suggest_results`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_advanced_doc_type_suggest_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}/suggest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuggestSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_advanced_index_suggest_results(self, index_name, **kwargs):  # noqa: E501
        """get_advanced_index_suggest_results  # noqa: E501

        Gets Suggestions in `index_name` limited by the request body fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_advanced_index_suggest_results(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: SuggestSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_advanced_index_suggest_results_with_http_info(index_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_advanced_index_suggest_results_with_http_info(index_name, **kwargs)  # noqa: E501
            return data

    def get_advanced_index_suggest_results_with_http_info(self, index_name, **kwargs):  # noqa: E501
        """get_advanced_index_suggest_results  # noqa: E501

        Gets Suggestions in `index_name` limited by the request body fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_advanced_index_suggest_results_with_http_info(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: SuggestSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advanced_index_suggest_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_advanced_index_suggest_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/suggest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuggestSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_advanced_search_results(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """get_advanced_search_results  # noqa: E501

        Advanced Search which gets all documents in `index_name` for provided search criteria. Please ensure you refer the getting started guides, to get the format of the query right.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_advanced_search_results(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document_type (required)
        :return: SearchSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_advanced_search_results_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_advanced_search_results_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
            return data

    def get_advanced_search_results_with_http_info(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """get_advanced_search_results  # noqa: E501

        Advanced Search which gets all documents in `index_name` for provided search criteria. Please ensure you refer the getting started guides, to get the format of the query right.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_advanced_search_results_with_http_info(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document_type (required)
        :return: SearchSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advanced_search_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_advanced_search_results`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_advanced_search_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''writeAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_document_types(self, index_name, **kwargs):  # noqa: E501
        """get_all_document_types  # noqa: E501

        Gets `All document_types` present in `index_name`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_document_types(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: GetDocTypesSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_document_types_with_http_info(index_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_document_types_with_http_info(index_name, **kwargs)  # noqa: E501
            return data

    def get_all_document_types_with_http_info(self, index_name, **kwargs):  # noqa: E501
        """get_all_document_types  # noqa: E501

        Gets `All document_types` present in `index_name`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_document_types_with_http_info(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: GetDocTypesSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_document_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_all_document_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDocTypesSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_documents(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """get_all_documents  # noqa: E501

        Fetches all documents in `doc_type_name` for `index_name`. All the documents and hence careful with its use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_documents(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: GetDocumentsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_documents_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_documents_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
            return data

    def get_all_documents_with_http_info(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """get_all_documents  # noqa: E501

        Fetches all documents in `doc_type_name` for `index_name`. All the documents and hence careful with its use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_documents_with_http_info(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: GetDocumentsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_all_documents`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_all_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDocumentsSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_indexes(self, **kwargs):  # noqa: E501
        """get_all_indexes  # noqa: E501

        Fetches `All indexes` that the user has. Not recommended to be used in production code, as there isn't that big a Use case for listing all indexes!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_indexes(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetIndexesSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_indexes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_indexes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_indexes_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_indexes  # noqa: E501

        Fetches `All indexes` that the user has. Not recommended to be used in production code, as there isn't that big a Use case for listing all indexes!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_indexes_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetIndexesSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_indexes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIndexesSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_basic_search_results(self, index_name, q, **kwargs):  # noqa: E501
        """get_basic_search_results  # noqa: E501

        Basic Search which gets all documents in `index_name` for provided search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_basic_search_results(index_name, q, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str q: Search Query (required)
        :return: SearchSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_basic_search_results_with_http_info(index_name, q, **kwargs)  # noqa: E501
        else:
            (data) = self.get_basic_search_results_with_http_info(index_name, q, **kwargs)  # noqa: E501
            return data

    def get_basic_search_results_with_http_info(self, index_name, q, **kwargs):  # noqa: E501
        """get_basic_search_results  # noqa: E501

        Basic Search which gets all documents in `index_name` for provided search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_basic_search_results_with_http_info(index_name, q, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str q: Search Query (required)
        :return: SearchSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''q']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_basic_search_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_basic_search_results`")  # noqa: E501
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `get_basic_search_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_doc_type_suggest_results(self, index_name, doc_type_name, q, **kwargs):  # noqa: E501
        """get_doc_type_suggest_results  # noqa: E501

        Gets Suggestions from `doc_type_name` in `index_name`. Please ensure you refer the getting started guides, to get the format of the query right.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_doc_type_suggest_results(index_name, doc_type_name, q, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document_type (required)
        :param str q: Details of the suggest query (required)
        :return: SuggestSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_doc_type_suggest_results_with_http_info(index_name, doc_type_name, q, **kwargs)  # noqa: E501
        else:
            (data) = self.get_doc_type_suggest_results_with_http_info(index_name, doc_type_name, q, **kwargs)  # noqa: E501
            return data

    def get_doc_type_suggest_results_with_http_info(self, index_name, doc_type_name, q, **kwargs):  # noqa: E501
        """get_doc_type_suggest_results  # noqa: E501

        Gets Suggestions from `doc_type_name` in `index_name`. Please ensure you refer the getting started guides, to get the format of the query right.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_doc_type_suggest_results_with_http_info(index_name, doc_type_name, q, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document_type (required)
        :param str q: Details of the suggest query (required)
        :return: SuggestSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name''q']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_doc_type_suggest_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_doc_type_suggest_results`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_doc_type_suggest_results`")  # noqa: E501
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `get_doc_type_suggest_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuggestSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document(self, index_name, doc_type_name, doc_id, **kwargs):  # noqa: E501
        """get_document  # noqa: E501

        Fetches the document referenced by `doc_id` in `doc_type_name` for `index_name`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document(index_name, doc_type_name, doc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: GetDocumentSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)  # noqa: E501
            return data

    def get_document_with_http_info(self, index_name, doc_type_name, doc_id, **kwargs):  # noqa: E501
        """get_document  # noqa: E501

        Fetches the document referenced by `doc_id` in `doc_type_name` for `index_name`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_with_http_info(index_name, doc_type_name, doc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: GetDocumentSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name''doc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_document`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_document`")  # noqa: E501
        # verify the required parameter 'doc_id' is set
        if ('doc_id' not in params or
                params['doc_id'] is None):
            raise ValueError("Missing the required parameter `doc_id` when calling `get_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501
        if 'doc_id' in params:
            path_params['doc_id'] = params['doc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDocumentSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document_type(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """get_document_type  # noqa: E501

        Checks whether `document_type` in `index_name` exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_type(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: GetDocTypeSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_document_type_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_type_with_http_info(index_name, doc_type_name, **kwargs)  # noqa: E501
            return data

    def get_document_type_with_http_info(self, index_name, doc_type_name, **kwargs):  # noqa: E501
        """get_document_type  # noqa: E501

        Checks whether `document_type` in `index_name` exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_type_with_http_info(index_name, doc_type_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: GetDocTypeSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name''doc_type_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_document_type`")  # noqa: E501
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params or
                params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_document_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}/document_types/{doc_type_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDocTypeSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_index(self, index_name, **kwargs):  # noqa: E501
        """get_index  # noqa: E501

        Checks whether `a particular index` {index_name} exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_index(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: GetIndexSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_index_with_http_info(index_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_index_with_http_info(index_name, **kwargs)  # noqa: E501
            return data

    def get_index_with_http_info(self, index_name, **kwargs):  # noqa: E501
        """get_index  # noqa: E501

        Checks whether `a particular index` {index_name} exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_index_with_http_info(index_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str index_name: Name of the index (required)
        :return: GetIndexSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken''readAppID']  # noqa: E501

        return self.api_client.call_api(
            '/indexes/{index_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIndexSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

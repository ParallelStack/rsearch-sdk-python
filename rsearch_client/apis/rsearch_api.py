# coding: utf-8

"""
    ParallelStack RSearch API

    REST API Specification for ParallelStack RSearch API

    OpenAPI spec version: 1.0.0
    Contact: team@parallelstack.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RsearchApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_document(self, index_name, doc_type_name, doc_id, document_details, **kwargs):
        """
        Creates `doc_id` in `doc_type_name` for `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_document(index_name, doc_type_name, doc_id, document_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :param object document_details: Details of the document (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_document_with_http_info(index_name, doc_type_name, doc_id, document_details, **kwargs)
        else:
            (data) = self.add_document_with_http_info(index_name, doc_type_name, doc_id, document_details, **kwargs)
            return data

    def add_document_with_http_info(self, index_name, doc_type_name, doc_id, document_details, **kwargs):
        """
        Creates `doc_id` in `doc_type_name` for `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_document_with_http_info(index_name, doc_type_name, doc_id, document_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :param object document_details: Details of the document (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'doc_type_name', 'doc_id', 'document_details']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `add_document`")
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params) or (params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `add_document`")
        # verify the required parameter 'doc_id' is set
        if ('doc_id' not in params) or (params['doc_id'] is None):
            raise ValueError("Missing the required parameter `doc_id` when calling `add_document`")
        # verify the required parameter 'document_details' is set
        if ('document_details' not in params) or (params['document_details'] is None):
            raise ValueError("Missing the required parameter `document_details` when calling `add_document`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']
        if 'doc_id' in params:
            path_params['doc_id'] = params['doc_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'document_details' in params:
            body_params = params['document_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'writeAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2005',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_document_type(self, index_name, doc_type_name, doc_type_details, **kwargs):
        """
        Creates specific `document_type` in `index_name` with specified parameters
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_document_type(index_name, doc_type_name, doc_type_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param object doc_type_details: Details of the document_type (required)
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_document_type_with_http_info(index_name, doc_type_name, doc_type_details, **kwargs)
        else:
            (data) = self.add_document_type_with_http_info(index_name, doc_type_name, doc_type_details, **kwargs)
            return data

    def add_document_type_with_http_info(self, index_name, doc_type_name, doc_type_details, **kwargs):
        """
        Creates specific `document_type` in `index_name` with specified parameters
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_document_type_with_http_info(index_name, doc_type_name, doc_type_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param object doc_type_details: Details of the document_type (required)
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'doc_type_name', 'doc_type_details']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_document_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `add_document_type`")
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params) or (params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `add_document_type`")
        # verify the required parameter 'doc_type_details' is set
        if ('doc_type_details' not in params) or (params['doc_type_details'] is None):
            raise ValueError("Missing the required parameter `doc_type_details` when calling `add_document_type`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'doc_type_details' in params:
            body_params = params['doc_type_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types/{doc_type_name}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_index(self, index_name, **kwargs):
        """
        Creates `a new index`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_index(index_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_index_with_http_info(index_name, **kwargs)
        else:
            (data) = self.add_index_with_http_info(index_name, **kwargs)
            return data

    def add_index_with_http_info(self, index_name, **kwargs):
        """
        Creates `a new index`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_index_with_http_info(index_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `add_index`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'writeAppID']

        return self.api_client.call_api('/indexes/{index_name}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse201',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_document(self, index_name, doc_type_name, doc_id, **kwargs):
        """
        Deletes `doc_id` in `doc_type_name` for `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_document(index_name, doc_type_name, doc_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)
        else:
            (data) = self.delete_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)
            return data

    def delete_document_with_http_info(self, index_name, doc_type_name, doc_id, **kwargs):
        """
        Deletes `doc_id` in `doc_type_name` for `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_document_with_http_info(index_name, doc_type_name, doc_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'doc_type_name', 'doc_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `delete_document`")
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params) or (params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `delete_document`")
        # verify the required parameter 'doc_id' is set
        if ('doc_id' not in params) or (params['doc_id'] is None):
            raise ValueError("Missing the required parameter `doc_id` when calling `delete_document`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']
        if 'doc_id' in params:
            path_params['doc_id'] = params['doc_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'writeAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2006',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_index(self, index_name, **kwargs):
        """
        Deletes `an index` {index_name}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_index(index_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_index_with_http_info(index_name, **kwargs)
        else:
            (data) = self.delete_index_with_http_info(index_name, **kwargs)
            return data

    def delete_index_with_http_info(self, index_name, **kwargs):
        """
        Deletes `an index` {index_name}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_index_with_http_info(index_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `delete_index`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['authToken', 'writeAppID']

        return self.api_client.call_api('/indexes/{index_name}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse202',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_advanced_search_results(self, index_name, doc_type_name, search, **kwargs):
        """
        Advanced Search which gets all documents in `index_name` for provided search criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_advanced_search_results(index_name, doc_type_name, search, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document)type (required)
        :param object search: Details of the search query (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_advanced_search_results_with_http_info(index_name, doc_type_name, search, **kwargs)
        else:
            (data) = self.get_advanced_search_results_with_http_info(index_name, doc_type_name, search, **kwargs)
            return data

    def get_advanced_search_results_with_http_info(self, index_name, doc_type_name, search, **kwargs):
        """
        Advanced Search which gets all documents in `index_name` for provided search criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_advanced_search_results_with_http_info(index_name, doc_type_name, search, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document)type (required)
        :param object search: Details of the search query (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'doc_type_name', 'search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advanced_search_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_advanced_search_results`")
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params) or (params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_advanced_search_results`")
        # verify the required parameter 'search' is set
        if ('search' not in params) or (params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `get_advanced_search_results`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'writeAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types/{doc_type_name}/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2007',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_document_types(self, index_name, **kwargs):
        """
        Gets `All document_types` present in `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_document_types(index_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_document_types_with_http_info(index_name, **kwargs)
        else:
            (data) = self.get_all_document_types_with_http_info(index_name, **kwargs)
            return data

    def get_all_document_types_with_http_info(self, index_name, **kwargs):
        """
        Gets `All document_types` present in `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_document_types_with_http_info(index_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_document_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_all_document_types`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_documents(self, index_name, doc_type_name, **kwargs):
        """
        Fetches all documents in `doc_type_name` for `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_documents(index_name, doc_type_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_documents_with_http_info(index_name, doc_type_name, **kwargs)
        else:
            (data) = self.get_all_documents_with_http_info(index_name, doc_type_name, **kwargs)
            return data

    def get_all_documents_with_http_info(self, index_name, doc_type_name, **kwargs):
        """
        Fetches all documents in `doc_type_name` for `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_documents_with_http_info(index_name, doc_type_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'doc_type_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_all_documents`")
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params) or (params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_all_documents`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types/{doc_type_name}/documents', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_indexes(self, **kwargs):
        """
        Fetches `All indexes`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_indexes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_indexes_with_http_info(**kwargs)
        else:
            (data) = self.get_all_indexes_with_http_info(**kwargs)
            return data

    def get_all_indexes_with_http_info(self, **kwargs):
        """
        Fetches `All indexes`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_indexes_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_indexes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_basic_search_results(self, index_name, q, **kwargs):
        """
        Basic Search which gets all documents in `index_name` for provided search criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_basic_search_results(index_name, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str q: Search Query (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_basic_search_results_with_http_info(index_name, q, **kwargs)
        else:
            (data) = self.get_basic_search_results_with_http_info(index_name, q, **kwargs)
            return data

    def get_basic_search_results_with_http_info(self, index_name, q, **kwargs):
        """
        Basic Search which gets all documents in `index_name` for provided search criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_basic_search_results_with_http_info(index_name, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str q: Search Query (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_basic_search_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_basic_search_results`")
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `get_basic_search_results`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes/{index_name}/search', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2007',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_document(self, index_name, doc_type_name, doc_id, **kwargs):
        """
        Fetches details of `doc_id` in `doc_type_name` for `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_document(index_name, doc_type_name, doc_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)
        else:
            (data) = self.get_document_with_http_info(index_name, doc_type_name, doc_id, **kwargs)
            return data

    def get_document_with_http_info(self, index_name, doc_type_name, doc_id, **kwargs):
        """
        Fetches details of `doc_id` in `doc_type_name` for `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_document_with_http_info(index_name, doc_type_name, doc_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :param str doc_id: Document ID (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'doc_type_name', 'doc_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_document`")
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params) or (params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_document`")
        # verify the required parameter 'doc_id' is set
        if ('doc_id' not in params) or (params['doc_id'] is None):
            raise ValueError("Missing the required parameter `doc_id` when calling `get_document`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']
        if 'doc_id' in params:
            path_params['doc_id'] = params['doc_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_document_type(self, index_name, doc_type_name, **kwargs):
        """
        Checks whether `document_type` in `index_name` exists
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_document_type(index_name, doc_type_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_document_type_with_http_info(index_name, doc_type_name, **kwargs)
        else:
            (data) = self.get_document_type_with_http_info(index_name, doc_type_name, **kwargs)
            return data

    def get_document_type_with_http_info(self, index_name, doc_type_name, **kwargs):
        """
        Checks whether `document_type` in `index_name` exists
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_document_type_with_http_info(index_name, doc_type_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the document_type (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'doc_type_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_document_type`")
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params) or (params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_document_type`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types/{doc_type_name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_index(self, index_name, **kwargs):
        """
        Checks whether `a particular index` {index_name} exists
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_index(index_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_index_with_http_info(index_name, **kwargs)
        else:
            (data) = self.get_index_with_http_info(index_name, **kwargs)
            return data

    def get_index_with_http_info(self, index_name, **kwargs):
        """
        Checks whether `a particular index` {index_name} exists
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_index_with_http_info(index_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_index`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes/{index_name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_suggest_results(self, index_name, doc_type_name, q, **kwargs):
        """
        Basic Search - Gets Suggestions from `doc_type_name` in `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_suggest_results(index_name, doc_type_name, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document_type (required)
        :param str q: Details of the suggest query (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_suggest_results_with_http_info(index_name, doc_type_name, q, **kwargs)
        else:
            (data) = self.get_suggest_results_with_http_info(index_name, doc_type_name, q, **kwargs)
            return data

    def get_suggest_results_with_http_info(self, index_name, doc_type_name, q, **kwargs):
        """
        Basic Search - Gets Suggestions from `doc_type_name` in `index_name`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_suggest_results_with_http_info(index_name, doc_type_name, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index_name: Name of the index (required)
        :param str doc_type_name: Name of the Document_type (required)
        :param str q: Details of the suggest query (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'doc_type_name', 'q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_suggest_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params) or (params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `get_suggest_results`")
        # verify the required parameter 'doc_type_name' is set
        if ('doc_type_name' not in params) or (params['doc_type_name'] is None):
            raise ValueError("Missing the required parameter `doc_type_name` when calling `get_suggest_results`")
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `get_suggest_results`")


        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']
        if 'doc_type_name' in params:
            path_params['doc_type_name'] = params['doc_type_name']

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['authToken', 'readAppID']

        return self.api_client.call_api('/indexes/{index_name}/document_types/{doc_type_name}/suggest', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2008',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
